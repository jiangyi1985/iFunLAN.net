@page
@model iFunNet.WebApi.Pages.GameModel
@{
}
<head>
    <style>
        body {
            margin: 0;
        }

        canvas {
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
</body>

<script src="js/jquery-1.6.4.min.js"></script>
<script src="js/three.js"></script>
@*<script src="js/FontLoader.js"></script>
<script src="js/TextGeometry.js"></script>*@
<script src="js/dat.gui.min.js"></script>
<script src="js/stats.min.js"></script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/signalr-protocol-msgpack/dist/browser/signalr-protocol-msgpack.js"></script>
<script src="~/js/gameHub.js?t=@(DateTime.Now)"></script>
<script>
    class Projectile{
        constructor(){
            this.moveDistancePerFrame= .8;
            this.x= 0;
            this.y= 0;
            this.z= .001;
            this.faceAngle= Math.PI / 2;
            //visible: false,
            this.target= null;
            this.color= 0xff0000;
        }
    }

    class Player{
        constructor(){
            this.attackRange= 12;
            this.attackSpeed= 0.8;
            this.foreSwingRatio= 0.3;
            this.backSwingRatio= 0.3;
            this.attackState= 0; //0:none, 1:foreswing, 2:backswing, 3:attackdelaying
            this.radius= 1;
            this.moveDistancePerFrame= 0.15;
            this.x= 10;
            this.y= 10;
            this.z= 0;
            this.color= 0xbbbbbb;
            this.currentColor= new THREE.Color(0xbbbbbb);
            this.attackingColor= 0xff0000;
            this.faceAngle= Math.PI / 2;
            this.target= null;
        }

        moveTo= function (x, y) {
            this.isAttackMoving = false;
            this.isMoving = true;
            this.target = null;
            this.attackState = 0;
            this.des = {
                x: x,
                y: y
            };

            lineMark.updateAt = new Date().getTime();
            lineMark.material.color = new THREE.Color(0x00ff00);
            lineMark.position.x = x;
            lineMark.position.y = y;
        };
        attackMoveTo= function (x, y) {
            this.isAttackMoving = true;

            var a = this.x - enemy.x;
            var b = this.y - enemy.y;
            var dis = Math.sqrt(a * a + b * b);
            if (dis < this.attackRange) {
                this.target = enemy;
                this.isMoving = false;
            } else {
                this.isMoving = true;
                this.target = null;
                this.attackState = 0;
                this.des = {
                    x: x,
                    y: y
                };
            }

            lineMark.updateAt = new Date().getTime();
            lineMark.material.color = new THREE.Color(0xff0000);
            lineMark.position.x = x;
            lineMark.position.y = y;
        };
        attack= function (obj) {
            this.isAttackMoving = false;
            this.target = obj;
            this.isMoving = false;
        };
    }

    //guid generator
    function uuidv4() {
      return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
      );
    }
    //var uid=uuidv4();
    var uid;

    //帧数统计
    var stats = new Stats();
    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
    document.body.appendChild(stats.dom);

    //图形化变量调整
    //var gui;
    //window.onload = function () {
    //    //var text = new FizzyText();
    //    gui = new dat.GUI();
    //    gui.add(me, 'attackSpeed', 0.5, 4);
    //    gui.add(me, 'attackRange', 1, 30);
    //    //gui.add(me, 'foreSwingRatio');
    //    //gui.add(me, 'backSwingRatio');
    //    gui.add(me, 'foreSwing').listen();
    //    gui.add(me, 'backSwing').listen();
    //    gui.add(me, 'attackDelay').listen();
    //    //gui.add(text, 'speed', -5, 5);
    //    //gui.add(text, 'displayOutline');
    //    //gui.add(text, 'explode');

    //    $('span:contains("foreSwing")').text('foreSwing(ms)');
    //    $('span:contains("backSwing")').text('backSwing(ms)');
    //    $('span:contains("attackDelay")').text('attackDelay(ms)');
    //};

    //操作状态
    var cameraOnMe = false;
    var screenMoveUp = false;
    var screenMoveDown = false;
    var screenMoveRight = false;
    var screenMoveLeft = false;

    //events
    document.addEventListener('mousedown', onDocumentMouseDown, false);
    document.addEventListener('keydown', onDocumentKeyDown, false);
    document.addEventListener('keyup', onDocumentKeyUp, false);
    document.addEventListener('mousemove', onDocumentMouseMove, false);
    document.addEventListener('contextmenu', onContextMenu, false);

    function onContextMenu(event) {
        event.preventDefault();
    }

    function onDocumentKeyDown(event) {
        //event.preventDefault();

        switch (event.which) {
            case 32: //space
                cameraOnMe = true;
                break;

            case 65: //A: attack move click

                //raycasterMouseMove.setFromCamera(mouseMove, camera);

                //intersecting enemy
                var arr = raycasterMouseMove.intersectObject(enemyCircle, false);
                if (arr.length > 0) {
                    me.attack(enemy);
                    break;
                } else {
                    var intersect = new THREE.Vector3();
                    raycasterMouseMove.ray.intersectPlane(new THREE.Plane(new THREE.Vector3(0, 0, 1), 0), intersect);

                    //console.log('right clicked on map: ' + intersect.x + ' ' + intersect.y);

                    if (intersect.x < 0 || intersect.x > mapSize || intersect.y < 0 || intersect.y > mapSize) {
                        console.log('outside attack move click: ' + intersect.x + ' ' + intersect.y);
                        break;
                    }

                    me.attackMoveTo(intersect.x, intersect.y);
                    break;
                }
                break;
        }
    }

    function onDocumentKeyUp(event) {
        event.preventDefault();

        switch (event.which) {
            case 32:
                cameraOnMe = false;
                break;
        }
    }

    var raycasterMouseMove = new THREE.Raycaster();
    var mouseMove = new THREE.Vector2();
    function onDocumentMouseMove(event) {
        event.preventDefault();

        mouseMove.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouseMove.y = -(event.clientY / window.innerHeight) * 2 + 1;

        screenMoveRight = mouseMove.x > 0.9;
        screenMoveLeft = mouseMove.x < -0.9;
        screenMoveUp = mouseMove.y > 0.9;
        screenMoveDown = mouseMove.y < -0.9;

        raycasterMouseMove.setFromCamera(mouseMove, camera);

        //intersecting enemy
        //var intersect = new THREE.Vector3();
        var arr = raycasterMouseMove.intersectObject(enemyCircle, false);
        //console.log('right clicked on map: ' + intersect.x + ' ' + intersect.y);
        if (arr.length > 0) {
            //arr[0].object.material.color = new THREE.Color(0xff0000);
            enemyCircle.material.color = new THREE.Color(enemy.colorMouseOver);

            //me.target = enemy;
        } else {
            enemyCircle.material.color = new THREE.Color(enemy.color);
            //me.isMoving=
        }
    }

    var raycasterMouseDown = new THREE.Raycaster();
    var mouseDown = new THREE.Vector2();
    function onDocumentMouseDown(event) {
        event.preventDefault();
        switch (event.which) {
            case 1: // left mouse click
                break;
            case 3: // right mouse click
                //debugger;
                if(!me) return;

                //clientX:0~1920 --> 0~1 --> 0~2 --> -1~1
                mouseDown.x = (event.clientX / window.innerWidth) * 2 - 1;
                //clientY:0~1080 --> 0~1 --> 0~-2 --> 1~-1
                mouseDown.y = -(event.clientY / window.innerHeight) * 2 + 1;

                raycasterMouseDown.setFromCamera(mouseDown, camera);

                //intersecting enemy
                var arr = raycasterMouseDown.intersectObject(enemyCircle, false);
                if (arr.length > 0) {
                    me.attack(enemy);
                    break;
                } else {
                    var intersect = new THREE.Vector3();
                    raycasterMouseDown.ray.intersectPlane(new THREE.Plane(new THREE.Vector3(0, 0, 1), 0), intersect);

                    //console.log('right clicked on map: ' + intersect.x + ' ' + intersect.y);

                    if (intersect.x < 0 || intersect.x > mapSize || intersect.y < 0 || intersect.y > mapSize) {
                        console.log('outside right click: ' + intersect.x + ' ' + intersect.y);
                        break;
                    }
                    
                    gameHub.move(intersect.x,intersect.y);

                    me.moveTo(intersect.x, intersect.y);

                    break;
                }
        }
    }


    var projectiles = [];
    var players=[];
    var me;

    var mapSize = 100;

    var scene = new THREE.Scene();

    var font;
    const fontLoader = new THREE.FontLoader();
    fontLoader.load( 'fonts/helvetiker_regular.typeface.json', function ( response ) {
					font = response;
				} );

    var camera = new THREE.PerspectiveCamera(15, window.innerWidth / window.innerHeight, 10, 1000);
    camera.up = new THREE.Vector3(0, 0, 1);
    camera.position.set(20, -100 + 20, 150);
    camera.lookAt(new THREE.Vector3(20, 0 + 20, 0));

    //var helper = new THREE.CameraHelper(camera);
    //scene.add(helper);

    var cameraMiniMap = new THREE.OrthographicCamera(-50, 50, -50, 50, 10, 1000);
    cameraMiniMap.up = new THREE.Vector3(0, -1, 0);
    cameraMiniMap.position.set(50, 50, -200);
    cameraMiniMap.lookAt(new THREE.Vector3(50, 50, 0));

    //var cameraRig = new THREE.Group();
    //cameraRig.add(camera);
    //cameraRig.add(camera2);
    //scene.add(cameraRig);

    // create an AudioListener and add it to the camera
    var listener = new THREE.AudioListener();
    camera.add(listener);

    // create a global audio source
    var soundProject = new THREE.Audio(listener);
    var soundForeSwing = new THREE.Audio(listener);
    var soundOnHit = new THREE.Audio(listener);

    // load a sound and set it as the Audio object's buffer
    var audioLoader = new THREE.AudioLoader();
    audioLoader.load('sounds/Orz-Zap.wav', function (buffer) {
        soundProject.setBuffer(buffer);
        //sound.setLoop(true);
        soundProject.setVolume(0.3);
        //sound.play();
    });
    audioLoader.load('sounds/radan-clip.WAV', function (buffer) {
        soundForeSwing.setBuffer(buffer);
        //sound.setLoop(true);
        soundForeSwing.setVolume(0.5);
        //sound.play();
    });
    audioLoader.load('sounds/ISD-Laser3.wav', function (buffer) {
        soundOnHit.setBuffer(buffer);
        //sound.setLoop(true);
        soundOnHit.setVolume(0.3);
        //sound.play();
    });

    //var controls = new THREE.OrbitControls(camera);

    var renderer = new THREE.WebGLRenderer(
        { antialias: true }
    );
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    //add map to scene
    //create a blue LineBasicMaterial
    var matMapBorder = new THREE.LineBasicMaterial({ color: 0xffffff });
    var geoMapBorder = new THREE.Geometry();
    geoMapBorder.vertices.push(new THREE.Vector3(0, 0, 0));
    geoMapBorder.vertices.push(new THREE.Vector3(mapSize, 0, 0));
    geoMapBorder.vertices.push(new THREE.Vector3(mapSize, mapSize, 0));
    geoMapBorder.vertices.push(new THREE.Vector3(0, mapSize, 0));
    geoMapBorder.vertices.push(new THREE.Vector3(0, 0, 0));
    //const verticesMapBorder=new Float32Array([0,0,0,
    //    mapSize, 0, 0,
    //    mapSize, mapSize, 0,
    //    0, mapSize, 0,
    //    0, 0, 0
    //]);
    //geoMapBorder.setAttribute('position',new THREE.Float32BufferAttribute(verticesMapBorder,3));
    var mapBorder = new THREE.Line(geoMapBorder, matMapBorder);
    scene.add(mapBorder);

    //var material2 = new THREE.LineBasicMaterial({ color: 0x888888 });

    //var geometry2 = new THREE.Geometry();
    //geometry2.vertices.push(new THREE.Vector3(0, 0, 0));
    //geometry2.vertices.push(new THREE.Vector3(0, 100, 0));

    //var line2 = new THREE.Line(geometry2, material2);
    //scene.add(line2);

    //add right click marker to scene
    var geoMark = new THREE.Geometry();
    geoMark.vertices.push(new THREE.Vector3(.5, 0, 0));
    geoMark.vertices.push(new THREE.Vector3(-.5, 0, 0));
    geoMark.vertices.push(new THREE.Vector3(0, 0, 0));
    geoMark.vertices.push(new THREE.Vector3(0, .5, 0));
    geoMark.vertices.push(new THREE.Vector3(0, 0, 0));
    geoMark.vertices.push(new THREE.Vector3(0, -.5, 0));
    //const verticesMark=new Float32Array([.5, 0, 0,
    //    -.5, 0, 0,
    //    0, 0, 0,
    //    0, .5, 0,
    //    0, 0, 0,
    //    0, -.5, 0
    //]);
    //geoMark.setAttribute('position',new THREE.Float32BufferAttribute(verticesMark,3));
    var matMark = new THREE.LineBasicMaterial({ color: 0x00ff00 });
    var lineMark = new THREE.Line(geoMark, matMark);
    lineMark.visible = false;
    lineMark.updateAt = 0;
    scene.add(lineMark);

    //var attackSpeed = 0.8;
    //var foreSwingRatio = 0.3;
    //var backSwingRatio = 0.3;

    /*
    var me = {
        attackRange: 12,
        //setAttackSpeed: function (aspd)//x attacks per second
        //{
        //    me.attackTime = 1000 / aspd;//total attack time
        //    me.foreSwing = .3 * me.attackTime;
        //    me.backSwing = .3 * me.attackTime;
        //    me. attackDelay=me.attackTime - me.foreSwing;
        //},

        attackSpeed: 0.8,
        foreSwingRatio: 0.3,
        backSwingRatio: 0.3,

        //attackSpeed:1,
        //attackTime:1000/this.attackSpeed,//total attack time
        //foreSwing: this.foreSwingRatio * (1000 / this.attackSpeed),
        //backSwing: this.backSwingRatio * (1000 / this.attackSpeed),
        //attackDelay: (1000 / this.attackSpeed) * (1 - this.foreSwingRatio),

        attackState: 0, //0:none, 1:foreswing, 2:backswing, 3:attackdelaying
        radius: 1,
        moveDistancePerFrame: 0.15,
        x: 10,
        y: 10,
        z: 0,
        color: 0xbbbbbb,
        currentColor: new THREE.Color(0xbbbbbb),
        attackingColor: 0xff0000,
        faceAngle: Math.PI / 2,
        moveTo: function (x, y) {
            me.isAttackMoving = false;
            me.isMoving = true;
            me.target = null;
            me.attackState = 0;
            me.des = {
                x: x,
                y: y
            };

            lineMark.updateAt = new Date().getTime();
            lineMark.material.color = new THREE.Color(0x00ff00);
            lineMark.position.x = x;
            lineMark.position.y = y;
        },
        attackMoveTo: function (x, y) {
            me.isAttackMoving = true;

            var a = me.x - enemy.x;
            var b = me.y - enemy.y;
            var dis = Math.sqrt(a * a + b * b);
            if (dis < me.attackRange) {
                me.target = enemy;
                me.isMoving = false;
            } else {
                me.isMoving = true;
                me.target = null;
                me.attackState = 0;
                me.des = {
                    x: x,
                    y: y
                };
            }

            lineMark.updateAt = new Date().getTime();
            lineMark.material.color = new THREE.Color(0xff0000);
            lineMark.position.x = x;
            lineMark.position.y = y;
        },
        attack: function (obj) {
            me.isAttackMoving = false;
            me.target = obj;
            me.isMoving = false;
        },
        target: null,
        //projectile:new Projectile()
    }
    */

    //debugger;
    //me.setAttackSpeed(0.8);

    function CreateMeshForPlayer(player)
    {
        var geoMeCircle = new THREE.CircleGeometry(player.radius, 64);
        var matMeCircle = new THREE.MeshBasicMaterial({ color: 0x666666 });
        //debugger;
        geoMeCircle.vertices.shift(); // Remove center vertex
        //geoMeCircle.attributes['position'].array=geoMeCircle.attributes['position'].array.slice(3);
        var meCircle = new THREE.LineLoop(geoMeCircle, matMeCircle);
        scene.add(meCircle);

        //var dirX = me.direction.x - me.x;
        //var dirY = me.direction.y - me.y;
        //var dis = me.radius;
        //debugger;
        var x = player.radius;
        var y = 0;
        var a1 = -2.5;
        var a2 = 2.5;
        var x2 = Math.cos(a1) * x - Math.sin(a1) * y;
        var y2 = Math.sin(a1) * x + Math.cos(a1) * y;
        var x3 = Math.cos(a2) * x - Math.sin(a2) * y;
        var y3 = Math.sin(a2) * x + Math.cos(a2) * y;


        var geoMe = new THREE.Geometry();
        geoMe.vertices.push(new THREE.Vector3(x, y, 0));
        geoMe.vertices.push(new THREE.Vector3(x2, y2, 0));
        geoMe.vertices.push(new THREE.Vector3(-x / 3, -y / 3, 0));
        geoMe.vertices.push(new THREE.Vector3(x3, y3, 0));
        //const verticesMe=new Float32Array([x, y, 0,
        //   x2, y2, 0,
        //   -x / 3, -y / 3, 0,
        //    x3, y3, 0
        //]);
        //geoMark.setAttribute('position',new THREE.Float32BufferAttribute(verticesMe,3));
        //geoMe.vertices.push(new THREE.Vector3(x, y, 0));
        //debugger;
        geoMe.faces.push(new THREE.Face3(0, 3, 2));
        geoMe.faces.push(new THREE.Face3(0, 2, 1));
        //geoMe.computeFaceNormals();
        var matMe = new THREE.MeshBasicMaterial({
            //side: THREE.DoubleSide,
            color: player.color
        });
        var meLine = new THREE.Mesh(geoMe, matMe);
        scene.add(meLine);
        
     //   var geoText = new THREE.TextGeometry(player.name, {
		   // font: font,
		   // size: 1,
		   // height: .5,
		   // curveSegments: 12,
		   // bevelEnabled: false,
	    //});
     //   var matText = new THREE.MeshBasicMaterial({
     //       //side: THREE.DoubleSide,
     //       color: player.color
     //   });
     //   var meshText = new THREE.Mesh(geoText, matText);
     //   debugger;
     //   scene.add(meshText);
        var div=document.createElement('div');
        div.style.position='absolute';
        div.style.zIndex='100';
        //debugger;
        //text.style.
        div.innerText=player.name;
        div.style.color='#bbb';
        document.body.appendChild(div);

        //debugger;
        player.mesh1=meCircle;
        player.mesh2=meLine;
        player.text=div;
    }


    var enemy = {
        radius: 1,
        moveDistancePerFrame: 0.1,
        x: 10,
        y: 10,
        z: 0,
        color: 0x666666,
        colorMouseOver: 0x888888,
        faceAngle: Math.PI / 2,
        moveTo: function (x, y) {
            enemy.isMoving = true;
            enemy.isAttacking = false;
            enemy.des = {
                x: x,
                y: y
            }
        }
    }
    var geoEnemyCircle = new THREE.CircleGeometry(enemy.radius, 64);
    var matEnemyCircle = new THREE.MeshBasicMaterial({ color: enemy.color });
    //geoEnemyCircle.vertices.shift();
    var enemyCircle = new THREE.Mesh(geoEnemyCircle, matEnemyCircle);
    scene.add(enemyCircle);

    function CreateMeshForProjectile(projectile)
    {
        var geoMeProj = new THREE.Geometry();
        geoMeProj.vertices.push(new THREE.Vector3(.4, 0, 0));
        geoMeProj.vertices.push(new THREE.Vector3(-.2, .2, 0));
        geoMeProj.vertices.push(new THREE.Vector3(-.2, -.2, 0));
        geoMeProj.faces.push(new THREE.Face3(0, 1, 2));
        var matMeProj = new THREE.MeshBasicMaterial({
            //side: THREE.DoubleSide,
            color: projectile.color
        });
        var meProj = new THREE.Mesh(geoMeProj, matMeProj);
        scene.add(meProj);
        projectile.mesh=meProj;
    }

    //methods for game hub to call
    function onServerConnected(){
        var name = prompt('Enter your name:', '');
        //debugger;
        //console.log('user:',name,uid);
        if (name != null) {
            //login as a new player
            gameHub.login(name).then(result => {
                uid = result;

                //create me
                me=new Player();
                me.uid=uid;
                me.name=name;

                //debugger;
                CreateMeshForPlayer(me);
                players.push(me);
            });
        }
        else {
            //view only mode
        }
    }
    function updateUser(user)    {
        //debugger;
        console.log('update user',user,user.x);
        if(user.Uuid!=me.uid)        {
            var found=false;
            for(var i=0;i<players.length;i++)            {
                var player=players[i];
                if(player.uid==user.Uuid)                {                    
                    console.log('update x y');
                    player.x=user.X;
                    player.y=user.Y;
                    found=true;
                    break;
                }
            }

            if(!found)            {                    
                    console.log('add new');
                var player=new Player();
                player.uid=user.Uuid;
                player.name=user.Name;
                player.x=user.X;
                player.y=user.Y;

                CreateMeshForPlayer(player);
                players.push(player);
            }
        }
    }
    function playerMoveTo(userUid, x, y)    {
        for(var i=0;i<players;i++)        {
            var player=players[i];
            if(player.uid==userUid)            {
                player.moveTo(x,y);
                break;
            }
        }
    }
    function playerCreateNew(userUid, userName)    {
        //debugger;
        if(userUid!=me.uid)
        {
            var player=new Player();
            player.uid=userUid;
            player.name=userName;

            CreateMeshForPlayer(player);
            players.push(player);
        }
    }

    var animate = function () {
        requestAnimationFrame(animate);

        stats.begin();

        //camera.position.x -= 0.01;
        //camera.position.y += 0.01;
        //camera.lookAt(new THREE.Vector3(0, 0, 0));

        //update player status
        for(var i=0;i<players.length;i++)
        {
            var player=players[i];

            //update player object

            player.attackTime = 1000 / player.attackSpeed;
            player.foreSwing = player.foreSwingRatio * player.attackTime;
            player.backSwing = player.backSwingRatio * player.attackTime;
            player.attackDelay = player.attackTime * (1 - player.foreSwingRatio);

            if (player.target) { //attacking
                var a = player.target.x - player.x;
                var b = player.target.y - player.y;
                var dis = Math.sqrt(a * a + b * b);

                player.faceAngle = Math.atan2(b, a);

                //console.log(a+' '+b+' '+dis+' '+me.faceAngle);

                //if (dis > me.attackRange) { //too far
                //    me.x += me.moveDistancePerFrame / dis * a;
                //    me.y += me.moveDistancePerFrame / dis * b;
                //} else { //can attack
                var t = (new Date()).getTime();

                if (player.attackState == 0) {
                    if (dis > player.attackRange) { //too far, move closer
                        player.x += player.moveDistancePerFrame / dis * a;
                        player.y += player.moveDistancePerFrame / dis * b;
                    } else if (t - player.projectAt < player.attackDelay) { //can not attack yet
                    } else { //start foreswing
                        player.attackState = 1;
                        player.foreSwingAt = t;

                        soundForeSwing.play();
                    }
                } else if (player.attackState == 1) { //fore-swinging
                    if (t - player.foreSwingAt < player.foreSwing) {
                        player.currentColor = new THREE.Color(player.color).lerp(new THREE.Color(player.attackingColor), (t - player.foreSwingAt) / player.foreSwing);
                    } else { //launch projectile
                        //console.log('projectile launched ' + t);
                                        
                        var projectile=new Projectile();
                        projectile.x = player.x;
                        projectile.y = player.y;
                        projectile.target = enemy;
                        ////me.projectile.visible = true;
                        projectiles.push(projectile);
                        CreateMeshForProjectile(projectile);

                        if (soundForeSwing.isPlaying)
                            soundForeSwing.stop();

                        soundProject.play();

                        player.attackState = 2;
                        player.backSwingAt = t;
                        player.projectAt = t;
                    }
                } else if (player.attackState == 2) { //back-swinging
                    if (t - player.backSwingAt < player.backSwing) {
                        player.currentColor = new THREE.Color(player.attackingColor).lerp(new THREE.Color(player.color), (t - player.backSwingAt) / player.backSwing);
                    } else {
                        player.attackState = 0;
                    }
                }
                //else if (me.attackState == 3) {
                //    if (t - me.projectAt < me.attackDelay) {

                //    } else {
                //        me.attackState = 1;
                //        me.foreSwingAt = t;
                //    }
                //}
                //}
            } else if (player.isMoving) { //moving
                var a = player.des.x - player.x;
                var b = player.des.y - player.y;
                var dis = Math.sqrt(a * a + b * b);

                player.faceAngle = Math.atan2(b, a);

                player.currentColor = new THREE.Color(player.color);

                //console.log(a+' '+b+' '+dis+' '+me.faceAngle);

                if (dis > player.moveDistancePerFrame) {
                    player.x += player.moveDistancePerFrame / dis * a;
                    player.y += player.moveDistancePerFrame / dis * b;
                } else {
                    player.isMoving = false;
                }

                if (soundForeSwing.isPlaying)
                    soundForeSwing.stop();

                if (player.isAttackMoving) {
                    var a = player.x - enemy.x;
                    var b = player.y - enemy.y;
                    var dis = Math.sqrt(a * a + b * b);
                    if (dis < player.attackRange) {
                        player.target = enemy;
                        player.isMoving = false;
                    }
                }
            }
            
            //update player mesh

            //debugger;
            player.mesh1.position.set(player.x, player.y, player.z);

            player.mesh2.position.set(player.x, player.y, player.z);
            player.mesh2.rotation.z = player.faceAngle;
            //meLine.material.color.r += .1;
            player.mesh2.material.color = player.currentColor;
            //console.log(meLine.material.color);

            //debugger;
            //console.log(player.mesh1.position);
            var v=player.mesh1.position.clone();
            v.project(camera);
            if(v.x>=-1 && v.x<=0.97 && v.y>=-1 && v.y<=1)
            {
                //console.log(v);
                var top=(1-v.y)*window.innerHeight/2;
                var left=(v.x+1)*window.innerWidth/2;
                //console.log(top,left);
                var width=player.text.clientWidth;
                player.text.style.top=(top-40)+'px';
                player.text.style.left=(left-width/2)+'px';
                player.text.style.display='';
            }
            else
                player.text.style.display='none';

            //console.log(meLine.rotation);
            //console.log(meLine.geometry.faces);
            //console.log(meLine.geometry.vertices);
            //meLine.rotation.z += 0.05;
            //meLine.rotation.y += 0.02;
            //meLine.rotation = new THREE.Euler(1, 0, me.faceAngle, 'XYZ');
        }

        //update projectile status
        for(var i=0;i<projectiles.length;i++)
        {
            //if (me.projectile.target) {
            var projectile=projectiles[i];

            var a = projectile.target.x - projectile.x;
            var b = projectile.target.y - projectile.y;
            var dis = Math.sqrt(a * a + b * b);

            projectile.faceAngle = Math.atan2(b, a);

            //console.log(a+' '+b+' '+dis+' '+me.faceAngle);

            if (dis > projectile.moveDistancePerFrame) { //projectile running
                projectile.x += projectile.moveDistancePerFrame / dis * a;
                projectile.y += projectile.moveDistancePerFrame / dis * b;
            } else { //on hit
                //console.log("on hit "+new Date().getTime());

                ///me.projectile.target = null;
                scene.remove(projectile.mesh);
                projectiles.splice(i,1);
                i--;

                if (soundOnHit.isPlaying)
                    soundOnHit.stop();
                soundOnHit.play();
            }
            //}
        }

        if (enemy.isMoving) {
            var a = enemy.des.x - enemy.x;
            var b = enemy.des.y - enemy.y;
            var dis = Math.sqrt(a * a + b * b);

            //me.faceAngle = Math.atan2(b, a);

            //me.currentColor = new THREE.Color(me.color);

            //console.log(a+' '+b+' '+dis+' '+me.faceAngle);

            if (dis > enemy.moveDistancePerFrame) {
                enemy.x += enemy.moveDistancePerFrame / dis * a;
                enemy.y += enemy.moveDistancePerFrame / dis * b;
            } else {
                enemy.isMoving = false;
            }
        }

        enemyCircle.position.set(enemy.x, enemy.y, enemy.z);
        //enemyCircle.position.set(0, 0, 0);
        //enemyCircle.rotation.x += 0.01;
        //enemyCircle.rotation.y += 0.01;

        for(var i=0;i<projectiles.length;i++)
        {
            var projectile=projectiles[i];
            projectile.mesh.position.set(projectile.x, projectile.y, projectile.z);
            //proj.position.set(0, 0, 0);
            projectile.mesh.rotation.z = projectile.faceAngle;
            projectile.mesh.visible = projectile.target != null;
        }


        var markTime = new Date().getTime() - lineMark.updateAt;
        lineMark.visible = markTime < 500 && markTime > 50;


        if (cameraOnMe && player) {
            camera.position.x = player.x;
            camera.position.y = player.y - 100;
        } else {
            if (screenMoveRight && camera.position.x < 100 - 30) camera.position.x += .5;
            if (screenMoveLeft && camera.position.x > -0 + 30) camera.position.x -= .5;
            if (screenMoveUp && camera.position.y < 0 - 10) camera.position.y += .5;
            if (screenMoveDown && camera.position.y > -100 + 10) camera.position.y -= .5;
        }

        renderer.setViewport(0, 0, window.innerWidth, window.innerHeight);
        renderer.setScissor(0, 0, window.innerWidth, window.innerHeight);
        renderer.setScissorTest(true);
        renderer.setClearColor(new THREE.Color(0x333333));
        renderer.render(scene, camera);

        //cameraMiniMap.position.x = me.x;
        //cameraMiniMap.position.y = me.y;
        renderer.setViewport(window.innerWidth - 200, window.innerHeight - 200, 200, 200);
        renderer.setScissor(window.innerWidth - 200, window.innerHeight - 200, 200, 200);
        renderer.setScissorTest(true);
        //renderer.setClearColor(new THREE.Color(0x000000));
        renderer.render(scene, cameraMiniMap);



        if (!enemy.isMoving) {
            //var r=Math.random()
            enemy.moveTo(Math.random() * 90 + 5, Math.random() * 90 + 5);
        }

        stats.end();
    };

    animate();
</script>
